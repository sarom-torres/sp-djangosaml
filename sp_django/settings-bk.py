"""
Django settings for sp_django project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os

import saml2
import saml2.saml

# configurações de ambiente
DOMAIN = "dev.gidlab.rnp.br"
PORT = "8080"
FQDN = "http://"+DOMAIN+":"+PORT
CERT_DIR = "certificates"

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = 'mzqqgr@mrk@4$)#4g(v*fdksrubct31xf*u)xwo=5v1zze+hd+'

DEBUG = True

ALLOWED_HOSTS = [
    '*'
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',
    'djangosaml2', #incluindo nova app django saml 
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', #checa usuarios django no banco de dados
    'djangosaml2.backends.Saml2Backend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Inclui o middleware saml2
MIDDLEWARE.append('djangosaml2.middleware.SamlSessionMiddleware')

ROOT_URLCONF = 'sp_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sp_django.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

#---------- CONFIGURACOES SAML -----------


SAML_SESSION_COOKIE_NAME = 'saml_session'
SESSION_COOKIE_SAMESITE=None

LOGIN_URL = '/saml2/login/' # URL de redirecionamento para endpoints protegidos
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

SAML_DEFAULT_BINDING = saml2.BINDING_HTTP_POST # SP-initiated SSO flow

SAML_IGNORE_LOGOUT_ERRORS = True

SAML2_DISCO_URL = 'https://ds.cafeexpresso.rnp.br/WAYF.php'

#SAML_DJANGO_USER_MAIN_ATTRIBUTE = 'username'

SAML_CREATE_UNKNOWN_USER = True # cria usuario no banco de dados

#ACS_DEFAULT_REDIRECT_URL = reverse_lazy('/')
LOGIN_REDIRECT_URL = '/users'

SAML_ATTRIBUTE_MAPPING = {
    'eduPersonPrincipalName': ('username', ),
    'mail': ('email', ),
    'givenName': ('first_name', ),
    'sn': ('last_name', ),
} # 'Atrib_SAML':('Atrib_USER_DJANGO')

#SAML_CONFIG_LOADER = os.path.join(BASE_DIR,'sp_django','sp-config')

SAML_CONFIG = {
  # full path to the xmlsec1 binary programm
  'xmlsec_binary': '/usr/bin/xmlsec1',

  # your entity id, usually your subdomain plus the url to the metadata view
  'entityid': FQDN + '/saml2/metadata/',

  # directory with attribute mapping
  'attribute_map_dir': os.path.join(BASE_DIR, 'attribute-maps'), # DONE criar diretorio e incluir arquivos do github
  'description': 'SP Implicit',

  # this block states what services we provide
  'service': {
      # we are just a lonely SP
      'sp' : {
          'name': 'SP Django Implicit',
          'ui_info': {
                'display_name': 'SP Django Implicit',
                'description': 'Provedor de serviços Django Implicit',
                'information_url': 'http://sp.information.url/',
                'privacy_statement_url': 'http://sp.privacy.url/'
                },
  
          'name_id_format': [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent", # TODO ver como colocar lista de transient/persistent
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
          ],
          # For Okta add signed logout requets. Enable this:
          # "logout_requests_signed": True,

            # TODO criar constant para dominio ou ip FQDN
          'endpoints': {
              # url and binding to the assetion consumer service view
              # do not change the binding or service name
              'assertion_consumer_service': [
                  (FQDN +'/saml2/acs/',
                   saml2.BINDING_HTTP_POST),
                  ],
              # url and binding to the single logout service view
              # do not change the binding or service name
              'single_logout_service': [
                  # Disable next two lines for HTTP_REDIRECT for IDP's that only support HTTP_POST. Ex. Okta:
                  (FQDN + '/saml2/ls/',
                   saml2.BINDING_HTTP_REDIRECT),
                  (FQDN + '/saml2/ls/post',
                   saml2.BINDING_HTTP_POST),
                  ],
          },

          'signing_algorithm':  saml2.xmldsig.SIG_RSA_SHA256,
          'digest_algorithm':  saml2.xmldsig.DIGEST_SHA256,

           # Mandates that the identity provider MUST authenticate the
           # presenter directly rather than rely on a previous security context.
          'force_authn': False,

           # Enable AllowCreate in NameIDPolicy.
          'name_id_format_allow_create': False,

           # attributes that this project need to identify a user
          'required_attributes': ['eduPersonPrincipalName',
                                  'givenName',
                                  'sn',
                                  'mail'],

          'want_response_signed': True,
          'authn_requests_signed': True,

          'want_assertions_signed': True,

          'only_use_keys_in_metadata': True,

          'allow_unsolicited': False,
          },
      },

  # where the remote metadata is stored, local, remote or mdq server.
  # One metadatastore or many ...
  # TODO metadado da federacao, escolher apenas um
  'metadata': {
      #'local': [os.path.join(BASE_DIR, 'ds-metadata.xml')],
      'remote': [{"url": "https://ds.cafeexpresso.rnp.br/metadata/ds-metadata.xml","cert": "null"},]
      #'mdq': [{"url": "https://ds.testunical.it",
      #         "cert": "certficates/others/ds.testunical.it.cert",
      #        }]
      },

  # set to 1 to output debugging information
  'debug': 1,

  # Signing
  'key_file': os.path.join(BASE_DIR, CERT_DIR, 'mykey.pem'),  # private part
  'cert_file': os.path.join(BASE_DIR, CERT_DIR, 'mycert.pem'),  # public part

  #Encryption
  'encryption_keypairs': [{
      'key_file': os.path.join(BASE_DIR, CERT_DIR, 'mykey.pem'),  # private part
      'cert_file': os.path.join(BASE_DIR, CERT_DIR, 'mycert.pem'),  # public part
  }],

  # own metadata settings
  'contact_person': [
      {'given_name': 'GIdLab',
       'sur_name': 'Equipe',
       'company': 'RNP',
       'email_address': 'gidlab@rnp.br',
       'contact_type': 'technical'},
      ],
  # you can set multilanguage information here
  'organization': {
      'name': [('GIdLab', 'pt-br')],
      'display_name': [('GIdLab', 'pt-br')],
      'url': [('http://gidlab.rnp.br', 'pt-br')],
    },
  }
